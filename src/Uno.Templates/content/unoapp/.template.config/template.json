{
  "$schema": "http://json.schemastore.org/template",
  "author": "Uno Platform",
  "classifications": [
    "Multi-platform",
    "Uno Platform",
    "Android",
    "iOS",
    "macOS",
    "Mac Catalyst",
    "Windows",
    "Linux",
    "WebAssembly",
    "WinUI"
  ],
  "name": "Uno Platform App",
  "identity": "Uno.Platform.UnoApp.WinUI.netcoremobile.CSharp",
  "groupIdentity": "Uno.Platform.UnoApp.WinUI.netcoremobile",
  "description": "Solution template for creating a multi-platform C# & XAML application targeting Windows App SDK, Android, iOS, macOS, WebAssembly, Skia/WPF and Skia/GTK for Linux.",
  "precedence": "99",
  "tags": {
    "language": "C#",
    "type": "solution",
    "editorTreatAs": "solution"
  },
  "shortName": "unoapp",
  "sourceName": "MyExtensionsApp._1",
  "defaultName": "UnoApp",
  "placeholderFilename": "template-ignore",
  "preferNameDirectory": true,
  "guids": [
    "C7433AE2-B1A0-4C1A-887E-5CAA7AAF67A6", // Solution file (SolutionGuid)
    "FAA2C1DE-F859-4053-9573-6245F7E832EF", // src solution folder
    "BACDD33A-304C-46C4-9B00-AC166978D7E0", // (core) library
    "339C569C-EE23-445E-B908-743673EE5BC9", // Platforms solution folder
    "BA1ACE40-623E-4F42-94BB-11CF4D52C445", // Web solution folder
    "24D56E12-2373-4CBD-9AD4-5C931D15FB0D", // Mobile
    "40EA03F7-8A22-4143-B251-79BAC3EB13D2", // Wasm
    "A5B8155A-118F-4794-B551-C6F3CF7E5411", // Skia.Gtk
    "6C744695-DA38-44D9-B487-FE5804C5508D", // Skia.WPF
    "5A78EE9A-1922-468C-96E3-45817727511C", // Windows
    "925C7A3E-6532-4E27-8ABE-37A4F9B73C8B", // Skia.Linux.FrameBuffer
    "1ADD4B1D-2758-4ED5-963A-FE3F4206BF20", // Server
    "7EF70027-9874-4112-A14F-33F02169CF8A", // Tests Solution folder
    "EB3EB846-D5CB-4140-834F-1CC40A0FD6D0", // Tests
    "7229D034-7DBE-4FD7-B0E4-38D617571F93", // UITests
    "F5EAE47C-F7DF-4D61-8A30-92251720AC4B", // Mobile Application Id
    "5ED31500-DF01-462D-9436-EC2EDCAA1965", // DataContracts
    "85978B6F-B8F7-4FFC-A392-37A1FD49E0C2" // MauiControls
  ],
  "symbols": {
    "preset": {
      "displayName": "Preset",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "recommended",
      "description": "Selects setup type",
      "choices": [
        {
          "choice": "recommended",
          "description": "Recommended set of options to create a production-ready app targeting multiple platforms",
          "displayName": "Default"
        },
        {
          "choice": "blank",
          "description": "Smallest set of options, with no extra dependencies, to create an app targeting multiple platforms",
          "displayName": "Blank"
        }
      ]
    },
    "sanitizedName": {
      "type": "generated",
      "generator": "regex",
      "parameters": {
        "source": "name",
        "steps": [
          {
            "regex": "[^a-zA-Z\\d:]+",
            "replacement": "-"
          }
        ]
      },
      "replaces": "$sanitizedProjectName$"
    },
    "appId": {
      "displayName": "Application ID",
      "type": "parameter",
      "datatype": "string",
      "description": "The application identifier (e.g. com.mycompany.myapp)"
    },
    "appIdDefault": {
      "type": "generated",
      "generator": "join",
      "parameters": {
        "symbols": [
          {
            "type": "const",
            "value": "com.companyname."
          },
          {
            "type": "ref",
            "value": "sanitizedName"
          }
        ]
      }
    },
    "appIdDefaultLower": {
      "type": "generated",
      "generator": "casing",
      "parameters": {
        "source": "appIdDefault",
        "toLower": true
      }
    },
    "appIdEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "appId",
        "fallbackVariableName": "appIdDefaultLower"
      },
      "replaces": "com.companyname.myextensionsapp"
    },
    "identityName": {
      "type": "generated",
      "generator": "regex",
      "parameters": {
        "source": "name",
        "steps": [
          {
            "regex": "[^a-zA-Z\\d\\.:]+",
            "replacement": "-"
          }
        ]
      },
      "replaces": "$identityName$"
    },
    "publisher": {
      "displayName": "Publisher",
      "type": "parameter",
      "datatype": "string"
    },
    "publisherDefault": {
      "type": "generated",
      "generator": "join",
      "parameters": {
        "symbols": [
          {
            "type": "const",
            "value": "O="
          },
          {
            "type": "ref",
            "value": "name"
          }
        ]
      }
    },
    "publisherEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "publisher",
        "fallbackVariableName": "publisherDefault"
      }
    },
    "publisherEvaluatorSanitizer": {
      "type": "generated",
      "generator": "regex",
      "parameters": {
        "source": "publisherEvaluator",
        "steps": [
          {
            "regex": "&",
            "replacement": "&amp;"
          }
        ]
      },
      "replaces": "$appPublisher$"
    },
    "tfm": {
      "displayName": "Target Framework",
      "type": "parameter",
      "datatype": "choice",
      "enableQuotelessLiterals": true,
      "replaces": "$baseTargetFramework$",
      "defaultValue": "net7.0",
      "description": "Select the .NET version of your solution",
      "choices": [
        {
          "choice": "net7.0",
          "displayName": ".NET 7.0",
          "description": "Target .NET 7.0 (Standard Term Support)"
        },
        {
          "choice": "net8.0",
          "displayName": ".NET 8.0",
          "description": "Target .NET 8.0 (Preview)"
        }
      ]
    },
    "architecture": {
      "displayName": "Presentation",
      "description": "Select the design pattern for your application",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "No additional presentation framework",
          "displayName": "None"
        },
        {
          "choice": "mvvm",
          "description": "Use the Model-View-ViewModel (MVVM) design pattern",
          "displayName": "MVVM"
        },
        {
          "choice": "mvux",
          "description": "Use the Model-View-Update eXtended (MVUX) design pattern",
          "displayName": "MVUX"
        }
      ]
    },
    "markup": {
      "displayName": "UI Markup",
      "description": "How would you like to code your UI",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "xaml",
          "description": "Use XAML for the UI",
          "displayName": "XAML"
        },
        {
          "choice": "csharp",
          "description": "Use C# Markup for the UI",
          "displayName": "C# Markup"
        }
      ],
      "defaultValue": "xaml"
    },
    "appTheme": {
      "displayName": "Theme",
      "description": "Selects the theme design system for the application.",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "material",
          "description": "Use the Material design theme",
          "displayName": "Material"
        },
        {
          "choice": "fluent",
          "description": "Use the Fluent design theme",
          "displayName": "Fluent"
        },
        {
          "choice": "cupertino",
          "description": "Use the Cupertino design theme",
          "displayName": "Cupertino"
        }
      ]
    },
    "platforms": {
      "displayName": "Platforms",
      "description": "What platforms would you like to target",
      "type": "parameter",
      "datatype": "choice",
      "enableQuotelessLiterals": true,
      "allowMultipleValues": true,
      "defaultValue": "android|ios|maccatalyst|wasm|windows|gtk",
      "choices": [
        {
          "choice": "android",
          "displayName": "Android"
        },
        {
          "choice": "ios",
          "displayName": "iOS"
        },
        {
          "choice": "maccatalyst",
          "displayName": "macOS (Catalyst)"
        },
        {
          "choice": "macos",
          "displayName": "macOS (AppKit)"
        },
        {
          "choice": "windows",
          "displayName": "Windows"
        },
        {
          "choice": "wasm",
          "displayName": "WebAssembly"
        },
        {
          "choice": "gtk",
          "displayName": "GTK"
        },
        {
          "choice": "wpf",
          "displayName": "WPF"
        },
        {
          "choice": "linux-fb",
          "displayName": "Linux Framebuffer"
        }
      ]
    },
    "tests": {
      "displayName": "Tests",
      "description": "Decide on a testing strategy",
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "choices": [
        {
          "choice": "none",
          "description": "Disable testing",
          "displayName": "None"
        },
        {
          "choice": "unit",
          "description": "Include a project for authoring traditional unit tests",
          "displayName": "Unit Tests"
        },
        {
          "choice": "ui",
          "description": "Include a project for authoring UI tests using the Uno.UITest framework",
          "displayName": "UI Tests"
        }
      ]
    },
    "presetTestsDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "unit|ui"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "none"
          }
        ]
      }
    },
    "testsEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "tests",
        "fallbackVariableName": "presetTestsDefault"
      }
    },
    "server": {
      "displayName": "Server",
      "type": "parameter",
      "datatype": "bool",
      "description": "Includes a Server project for an API & host for the WebAssembly project"
    },
    "presetServerDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "bool",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "serverEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "server",
        "fallbackVariableName": "presetServerDefault"
      }
    },
    "toolkit": {
      "displayName": "Toolkit",
      "description": "Includes Uno.Toolkit for additional controls and helper classes",
      "type": "parameter",
      "datatype": "bool"
    },
    "dependencyInjection": {
      "displayName": "Dependency Injection",
      "description": "Use dependency injection for registering and accessing services",
      "type": "parameter",
      "datatype": "bool"
    },
    "analyzers": {
      "displayName": "Analyzers",
      "description": "Enable C# analyzers",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "configuration": {
      "displayName": "Configuration",
      "description": "Load configuration information from appsettings.json",
      "type": "parameter",
      "datatype": "bool"
    },
    "http": {
      "displayName": "HTTP",
      "description": "Register native handlers for http and setup Refit support",
      "type": "parameter",
      "datatype": "bool"
    },
    "localization": {
      "displayName": "Localization",
      "description": "Configures support for localizing resources throughout the application",
      "type": "parameter",
      "datatype": "bool"
    },
    "cultures": {
      "displayName": "Locales",
      "description": "Adds support for additional locales",
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "defaultValue": "es|fr|pt-BR",
      "choices": [
        {
          "choice": "ar",
          "description": "Arabic",
          "displayName": "Arabic"
        },
        {
          "choice": "cs",
          "description": "Czech",
          "displayName": "Czech"
        },
        {
          "choice": "da",
          "description": "Danish",
          "displayName": "Danish"
        },
        {
          "choice": "nl",
          "description": "Dutch",
          "displayName": "Dutch"
        },
        {
          "choice": "fr",
          "description": "French",
          "displayName": "French"
        },
        {
          "choice": "de",
          "description": "German",
          "displayName": "German"
        },
        {
          "choice": "es",
          "description": "Spanish",
          "displayName": "Spanish"
        },
        {
          "choice": "it",
          "description": "Italian",
          "displayName": "Italian"
        },
        {
          "choice": "ja",
          "description": "Japanese",
          "displayName": "Japanese"
        },
        {
          "choice": "ko",
          "description": "Korean",
          "displayName": "Korean"
        },
        {
          "choice": "pt-BR",
          "description": "Portuguese (Brazil)",
          "displayName": "Portuguese (Brazil)"
        },
        {
          "choice": "ru",
          "description": "Russian",
          "displayName": "Russian"
        },
        {
          "choice": "sv",
          "description": "Swedish",
          "displayName": "Swedish"
        },
        {
          "choice": "tr",
          "description": "Turkish",
          "displayName": "Turkish"
        },
        {
          "choice": "uk",
          "description": "Ukrainian",
          "displayName": "Ukrainian"
        },
        {
          "choice": "vi",
          "description": "Vietnamese",
          "displayName": "Vietnamese"
        },
        {
          "choice": "zh-Hans",
          "description": "Chinese (Simplified)",
          "displayName": "Chinese (Simplified)"
        },
        {
          "choice": "zh-Hant",
          "description": "Chinese (Traditional)",
          "displayName": "Chinese (Traditional)"
        }
      ]
    },
    "logging": {
      "displayName": "Logging",
      "description": "Configures logging support in the application",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "none",
          "description": "Debug Logging for the Application Framework to the Console",
          "displayName": "Console"
        },
        {
          "choice": "default",
          "description": "Logging is accessible via dependency injection and writes output to Console",
          "displayName": "Default"
        },
        {
          "choice": "serilog",
          "description": "Logging is accessible via dependency injection and uses Serilog",
          "displayName": "Serilog"
        }
      ]
    },
    "navigation": {
      "displayName": "Navigation",
      "description": "Configures navigation in the application",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "regions",
          "displayName": "Regions",
          "description": "Uses Uno.Extensions.Navigation to navigate using regions"
        },
        {
          "choice": "blank",
          "displayName": "Blank",
          "description": "Provides Blank App experience with default WinUI Frame Navigation"
        }
      ]
    },
    "authentication": {
      "displayName": "Authentication",
      "description": "Configures authentication support in the application",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "none",
      "choices": [
        {
          "choice": "none",
          "description": "No authentication",
          "displayName": "None"
        },
        {
          "choice": "custom",
          "description": "Application uses custom logic to authenticate user",
          "displayName": "Custom"
        },
        {
          "choice": "msal",
          "description": "Application uses MSAL to authenticate user",
          "displayName": "MSAL"
        },
        {
          "choice": "oidc",
          "description": "Application uses OpenID Connect to authenticate user",
          "displayName": "OIDC"
        },
        {
          "choice": "Web",
          "description": "Application uses web based authentication to authenticate user",
          "displayName": "Web"
        }
      ]
    },
    "dspGenerator": {
      "displayName": "Use the DSP Generator",
      "description": "When enabled this will include a DSP file and the DSP Generator NuGet package",
      "type": "parameter",
      "datatype": "bool"
    },
    "presetDspDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "bool",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "dspGeneratorEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "dspGenerator",
        "fallbackVariableName": "presetDspDefault"
      }
    },
    "continuousIntegration": {
      "displayName": "Continuous Integration",
      "description": "Configures continuous integration support for the solution",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "none",
      "choices": [
        {
          "choice": "none",
          "description": "No continuous integration",
          "displayName": "None"
        },
        {
          "choice": "azure",
          "description": "Azure Pipelines",
          "displayName": "Azure Pipelines"
        },
        {
          "choice": "github",
          "description": "GitHub Actions",
          "displayName": "GitHub Actions"
        }
      ]
    },
    "defaultBranchName": {
      "displayName": "Default Branch Name",
      "datatype": "text",
      "description": "The name of the default branch for the repository",
      "type": "parameter",
      "defaultValue": "main",
      "replaces": "$DefaultBranchName$"
    },
    "cpm": {
      "displayName": "Central Package Management",
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "true",
      "description": "NuGet package versions are centrally managed"
    },
    "vscode": {
      "displayName": "Visual Studio Code Debugging",
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "true",
      "description": "Sets up Visual Studio Code Debugging for WebAssembly and Skia Gtk"
    },
    "wasmPwaManifest": {
      "displayName": "PWA Manifest",
      "description": "Includes a manifest in the WebAssembly project to make the application a PWA",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "mauiEmbedding": {
      "displayName": ".NET MAUI Embedding",
      "description": "Configures application to embed .NET MAUI controls",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false"
    },
    "skipRestore": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Skip Restore",
      "description": "If specified, skips the automatic restore of the project on create.",
      "defaultValue": "false"
    },
    "unoWinUIVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoWinUIVersion",
      "replaces": "$UnoWinUIVersion$"
    },
    "unoExtensionsVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoExtensionsVersion",
      "replaces": "$UnoExtensionsVersion$"
    },
    "unoExtensionsLoggingVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoExtensionsLoggingVersion",
      "replaces": "$UnoExtensionsLoggingVersion$"
    },
    "skiaSharpVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultSkiaSharpVersion",
      "replaces": "$SkiaSharpVersion$"
    },
    "unoCoreExtensionsLoggingVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoCoreExtensionsLoggingVersion",
      "replaces": "$UnoCoreExtensionsLoggingVersion$"
    },
    "unoThemesVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoThemesVersion",
      "replaces": "$UnoThemesVersion$"
    },
    "unoDspTasksVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoDspTasksVersion",
      "replaces": "$UnoDspTasksVersion$"
    },
    "unoToolkitVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoToolkitVersion",
      "replaces": "$UnoToolkitVersion$"
    },
    "unoToolkitMarkupVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoToolkitMarkupVersion",
      "replaces": "$UnoToolkitMarkupVersion$"
    },
    "unoResizetizerVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoResizetizerVersion",
      "replaces": "$UnoResizetizerVersion$"
    },
    "unoUniversalImageLoaderVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoUniversalImageLoaderVersion",
      "replaces": "$UnoUniversalImageLoaderVersion$"
    },
    "unoWasmBootstrapVersion": {
      "type": "parameter",
      "datatype": "text"
    },
    "mauiVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$DefaultMauiVersion$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "text",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "7.0.92"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "8.0.0-rc.1.9171"
          }
        ]
      }
    },
    "unoWasmBootstrapVersionDefault": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$WasmBootstrapServer$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "DefaultUnoWasmBootstrapVersionNet7"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "DefaultUnoWasmBootstrapVersionNet8"
          }
        ]
      }
    },
    "unoWasmBootstrapVersionEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "unoWasmBootstrapVersion",
        "fallbackVariableName": "unoWasmBootstrapVersionDefault"
      },
      "replaces": "$UnoWasmBootstrapVersion$"
    },
    "unoMarkupVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoMarkupVersion",
      "replaces": "$UnoMarkupVersion$"
    },
    "unoUITestHelpersVersion": {
      "type": "parameter",
      "datatype": "text",
      "defaultValue": "DefaultUnoUITestHelpersVersion",
      "replaces": "$UnoUITestHelpersVersion$"
    },
    "isVsix": {
      "displayName": "isVsix",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false"
    },
    // TODO: change this to != net7.0 when we don't have backport concerns
    "useMauiPackageReference": {
      "type": "computed",
      "datatype": "bool",
      "value": "(mauiEmbedding && tfm == 'net8.0')"
    },
    "useAzurePipelines": {
      "type": "computed",
      "datatype": "bool",
      "value": "(continuousIntegration == 'azure')"
    },
    "useGitHubActions": {
      "type": "computed",
      "datatype": "bool",
      "value": "(continuousIntegration == 'github')"
    },
    "useCPM": {
      "type": "computed",
      "datatype": "bool",
      "value": "cpm"
    },
    "useTestSolutionFolder": {
      "type": "computed",
      "datatype": "bool",
      "value": "(testsEvaluator != 'none')"
    },
    "useCsharpMarkup": {
      "type": "computed",
      "datatype": "bool",
      "value": "(markup == 'csharp')"
    },
    "useXaml": {
      "type": "computed",
      "datatype": "bool",
      "value": "(markup == 'xaml')"
    },
    "DspGenerator": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$DspGenerator$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(markup == 'xaml')",
            "value": "Xaml"
          },
          {
            "condition": "(markup == 'csharp')",
            "value": "CSharp"
          }
        ]
      }
    },
    "presetAppThemeDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "material"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "fluent"
          }
        ]
      }
    },
    "appThemeEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "appTheme",
        "fallbackVariableName": "presetAppThemeDefault"
      }
    },
    "useDspGenerator":{
      "type": "computed",
      "datatype": "bool",
      "value": "(dspGeneratorEvaluator && appThemeEvaluator == 'material')"
    },
    "useMaterial": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appThemeEvaluator == 'material')"
    },
    "useFluent": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appThemeEvaluator == 'fluent')"
    },
    "useCupertino": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appTheme == 'cupertino')"
    },
    "themeBackgroundBrush": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$themeBackgroundBrush$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(appThemeEvaluator == 'material')",
            "value": "BackgroundBrush"
          },
          {
            "condition": "(appThemeEvaluator == 'fluent')",
            "value": "ApplicationPageBackgroundThemeBrush"
          },
          {
            "condition": "(appTheme == 'cupertino')",
            "value": "CupertinoSystemBackgroundBrush"
          }
        ]
      }
    },
    "presetDependencyInjectionDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "bool",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "useDependencyInjection": {
      "type": "generated",
      "datatype": "bool",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "dependencyInjection",
        "fallbackVariableName": "presetDependencyInjectionDefault"
      }
    },
    "presetToolkitDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "bool",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "useToolkit": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "toolkit",
        "fallbackVariableName": "presetToolkitDefault"
      }
    },
    "presetLoggingDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "serilog"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "none"
          }
        ]
      }
    },
    "loggingEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "logging",
        "fallbackVariableName": "presetLoggingDefault"
      }
    },
    "useLoggingFallback": {
      "type": "computed",
      "datatype": "bool",
      "value": "(loggingEvaluator == 'none')"
    },
    "useLogging": {
      "type": "computed",
      "datatype": "bool",
      "value": "(useDependencyInjection && loggingEvaluator != 'none')"
    },
    "useSerilog": {
      "type": "computed",
      "datatype": "bool",
      "value": "(useDependencyInjection && loggingEvaluator == 'serilog')"
    },
    "useAspNetCoreSerilogPackage": {
      "type": "computed",
      "datatype": "bool",
      "value": "(serverEvaluator && useSerilog)"
    },
    "presetArchitectureDefault": {
      "type": "generated",
      "generator": "switch",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "mvux"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "none"
          }
        ]
      }
    },
    "architectureEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "architecture",
        "fallbackVariableName": "presetArchitectureDefault"
      }
    },
    "useMvux": {
      "type": "computed",
      "datatype": "bool",
      "value": "architectureEvaluator == 'mvux'"
    },
    "useMvvm": {
      "type": "computed",
      "datatype": "bool",
      "value": "architectureEvaluator == 'mvvm' || (architectureEvaluator == 'none' && useExtensionsNavigation)"
    },
    "useMvvmOrMvux": {
      "type": "computed",
      "datatype": "bool",
      "value": "useMvux || useMvvm"
    },
    "useGtk": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == gtk)"
    },
    "useLinuxFb": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == linux-fb)"
    },
    "useAndroid": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == android)"
    },
    "useIOS": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == ios)"
    },
    "useMacOS": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == macos)"
    },
    "useMacCatalyst": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == maccatalyst)"
    },
    "useMobile": {
      "type": "computed",
      "dataType": "bool",
      "value": "(platforms == android || platforms == ios || platforms == macos || platforms == maccatalyst)"
    },
    "useWasm": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wasm)"
    },
    "useWinAppSdk": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == windows)"
    },
    "useWpf": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wpf)"
    },
    "useNonMauiPlatforms": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wpf || platforms == wasm || platforms == gtk || platforms == linux-fb || platforms == macos)"
    },
    "mauiNamespaces": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$mauiNamespaces$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            // This works.... don't try to optimize it!
            "condition": "(platforms == wpf && mauiEmbedding || platforms == wasm && mauiEmbedding || platforms == gtk  && mauiEmbedding || platforms == linux-fb  && mauiEmbedding || platforms == macos  && mauiEmbedding)",
            "value": "\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      xmlns:maui=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:not_maui=\"http://notmaui\"\n      mc:Ignorable=\"d not_maui\""
          },
          {
            "condition": "true",
            "value": "\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\""
          }
        ]
      }
    },
    "useDataContracts": {
      "type": "computed",
      "dataType": "bool",
      "value": "(useDependencyInjection && useHttp)"
    },
    "useUnitTests": {
      "type": "generated",
      "generator": "regexMatch",
      "dataType": "bool",
      "parameters": {
        "source": "testsEvaluator",
        "pattern": ".*unit.*"
      }
    },
    "useUITests": {
      "type": "generated",
      "generator": "regexMatch",
      "dataType": "bool",
      "parameters": {
        "source": "testsEvaluator",
        "pattern": ".*ui.*"
      }
    },
    "useSkia": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wpf || platforms == gtk || platforms == linux-fb)"
    },
    "useServer": {
      "type": "computed",
      "datatype": "bool",
      "value": "(serverEvaluator && (platforms == wasm || http))"
    },
    "useAndroidMaterial": {
      "type": "computed",
      "datatype": "bool",
      "value": "(useAndroid && !mauiEmbedding)"
    },
    "presetConfigurationDefault": {
      "type": "generated",
      "generator": "switch",
      "datatype": "bool",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "configurationEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "configuration",
        "fallbackVariableName": "presetConfigurationDefault"
      }
    },
    "useConfiguration": {
      "type": "computed",
      "dataType": "bool",
      "value": "(useDependencyInjection && configurationEvaluator)"
    },
    "presetHttpDefault": {
      "type": "generated",
      "generator": "switch",
      "datatype": "bool",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "httpEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "http",
        "fallbackVariableName": "presetHttpDefault"
      }
    },
    "useHttp": {
      "type": "computed",
      "dataType": "bool",
      "value": "(httpEvaluator && useConfiguration)"
    },
    "presetLocalizationDefault": {
      "type": "generated",
      "generator": "switch",
      "datatype": "bool",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "true"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "false"
          }
        ]
      }
    },
    "localizationEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "localization",
        "fallbackVariableName": "presetLocalizationDefault"
      }
    },
    "useLocalization": {
      "type": "computed",
      "dataType": "bool",
      "value": "(localizationEvaluator && useConfiguration)"
    },
    "useArabic": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ar'"
    },
    "useCzech": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'cs'"
    },
    "useDanish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'da'"
    },
    "useDutch": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'nl'"
    },
    "useFrench": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'fr'"
    },
    "useGerman": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'de'"
    },
    "useSpanish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'es'"
    },
    "useItalian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'it'"
    },
    "useJapanese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ja'"
    },
    "useKorean": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ko'"
    },
    "usePortuguese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'pt-BR'"
    },
    "useRussian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ru'"
    },
    "useSwedish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'sv'"
    },
    "useTurkish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'tr'"
    },
    "useUkrainian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'uk'"
    },
    "useVietnamese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'vi'"
    },
    "useChineseSimplified": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'zh-Hans'"
    },
    "useChineseTraditional": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'zh-Hant'"
    },
    "libraryBaseTargetFramework": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$libraryBaseTargetFramework$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "net7.0"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "net8.0"
          }
        ]
      }
    },
    "ciTargetDotNetVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$ciTargetDotNetVersion$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "7.0.x"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "8.0.x"
          }
        ]
      }
    },
    "mobileTargetFrameworks": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$mobileTargetFrameworks$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms == ios && platforms == maccatalyst)",
            "value": "net7.0-android;net7.0-ios;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms == ios && platforms == maccatalyst)",
            "value": "net8.0-android;net8.0-ios;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms == ios && platforms != maccatalyst)",
            "value": "net7.0-android;net7.0-ios"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms == ios && platforms != maccatalyst)",
            "value": "net8.0-android;net8.0-ios"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms == ios && platforms == maccatalyst)",
            "value": "net7.0-ios;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms == ios && platforms == maccatalyst)",
            "value": "net8.0-ios;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms != ios && platforms == maccatalyst)",
            "value": "net7.0-android;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms != ios && platforms == maccatalyst)",
            "value": "net8.0-android;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms != ios && platforms != maccatalyst)",
            "value": "net7.0-android"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms != ios && platforms != maccatalyst)",
            "value": "net8.0-android"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms == ios && platforms != maccatalyst)",
            "value": "net7.0-ios"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms == ios && platforms != maccatalyst)",
            "value": "net8.0-ios"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms != ios && platforms == maccatalyst)",
            "value": "net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms != ios && platforms == maccatalyst)",
            "value": "net8.0-maccatalyst"
          },
          {
            "condition": "(platforms != android && platforms != ios && platforms != maccatalyst)",
            "value": ""
          }
        ]
      }
    },
    "toolkitNamespace": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$toolkitNamespace$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(useToolkit)",
            "value": "\n      xmlns:utu=\"using:Uno.Toolkit.UI\""
          },
          {
            "condition": "true",
            "value": ""
          }
        ]
      }
    },
    "materialNamespace": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$materialNamespace$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(appThemeEvaluator == 'material')",
            "value": "\n      xmlns:um=\"using:Uno.Material\""
          },
          {
            "condition": "true",
            "value": ""
          }
        ]
      }
    },
    "toolkitSafeArea": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$toolkitSafeArea$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(useToolkit)",
            "value": " utu:SafeArea.Insets=\"VisibleBounds\""
          },
          {
            "condition": "(!useToolkit)",
            "value": ""
          }
        ]
      }
    },
    "shellRouteViewModel": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$shellRouteViewModel$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "ShellModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "ShellViewModel"
          }
        ]
      }
    },
    "mainRouteViewModel": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$mainRouteViewModel$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "MainModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "MainViewModel"
          }
        ]
      }
    },
    "secondRouteViewModel": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$secondRouteViewModel$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "SecondModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "SecondViewModel"
          }
        ]
      }
    },
    "loginRouteViewModel": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$loginRouteViewModel$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "LoginModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "LoginViewModel"
          }
        ]
      }
    },
    "mainDataContext": {
      "type": "generated",
      "generator": "switch",
      "datatype": "string",
      "replaces": "$mainDataContext$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "BindableMainModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "MainViewModel"
          }
        ]
      }
    },
    "secondDataContext": {
      "type": "generated",
      "generator": "switch",
      "datatype": "string",
      "replaces": "$secondDataContext$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(architectureEvaluator == 'mvux')",
            "value": "BindableSecondModel"
          },
          {
            "condition": "(architectureEvaluator == 'mvvm')",
            "value": "SecondViewModel"
          }
        ]
      }
    },
    "presetNavigationDefault": {
      "type": "generated",
      "generator": "switch",
      "datatype": "string",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(preset == 'recommended')",
            "value": "regions"
          },
          {
            "condition": "(preset == 'blank')",
            "value": "blank"
          }
        ]
      }
    },
    "navigationEvaluator": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "navigation",
        "fallbackVariableName": "presetNavigationDefault"
      }
    },
    "navigationNamespace": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$navigationNamespace$",
      "parameters": {
        "evaluator": "C++",
        "cases": [
          {
            "condition": "(navigationEvaluator == 'regions')",
            "value": "\n      xmlns:uen=\"using:Uno.Extensions.Navigation.UI\""
          },
          {
            "condition": "true",
            "value": ""
          }
        ]
      }
    },
    "useAuthentication": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDependencyInjection && authentication != 'none'"
    },
    "useCustomAuthentication": {
      "type": "computed",
      "datatype": "bool",
      "value": "useAuthentication && authentication == 'custom'"
    },
    "useMsalAuthentication": {
      "type": "computed",
      "datatype": "bool",
      "value": "useAuthentication && authentication == 'msal'"
    },
    "useOidcAuthentication": {
      "type": "computed",
      "datatype": "bool",
      "value": "useAuthentication && authentication == 'oidc'"
    },
    "useWebAuthentication": {
      "type": "computed",
      "datatype": "bool",
      "value": "useAuthentication && authentication == 'web'"
    },
    // MSAL causes an error when used with WinAppSdk when self-contained
    "useWinAppSdkSelfContained": {
      "type": "computed",
      "datatype": "bool",
      "value": "authentication != 'msal'"
    },
    "useProtocolRedirect": {
      "type": "computed",
      "datatype": "bool",
      "value": "useWebAuthentication || useOidcAuthentication || useMsalAuthentication"
    },
    "useExtensionsNavigation": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDependencyInjection && navigationEvaluator != 'blank'"
    },
    "useNavigationToolkit": {
      "type": "computed",
      "datatype": "bool",
      "value": "useExtensionsNavigation && useToolkit"
    },
    "useReactiveExtensionsNavigation": {
      "type": "computed",
      "datatype": "bool",
      "value": "useExtensionsNavigation && useMvux"
    },
    "useRegionsNav": {
      "type": "computed",
      "datatype": "bool",
      "value": "useExtensionsNavigation && navigationEvaluator == 'regions'"
    },
    "useFrameNav": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDependencyInjection != 'true' || navigationEvaluator == 'blank'"
    },
    "coreProjectHasProjectReferences": {
      "type": "computed",
      "datatype": "bool",
      "value": "(mauiEmbedding || useHttp)"
    },
    "useInfrastructureNamespace": {
      "type": "computed",
      "datatype": "bool",
      "value": "useHttp && useDependencyInjection"
    },
    "useBusinessModelsNamespace": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDependencyInjection && (useConfiguration || navigationEvaluator != 'blank')"
    },
    "MsftExtensionsLoggingConsoleVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$MsftExtensionsLoggingConsoleVersion$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "7.0.0"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "8.0.0-rc.1.23419.4"
          }
        ]
      }
    },
    "MsftWindowsCompatibilityVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$MsftWindowsCompatibilityVersion$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net7.0')",
            "value": "7.0.4"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "8.0.0-rc.1.23420.5"
          }
        ]
      }
    },
    "HostIdentifier": {
      "type": "bind",
      "binding": "HostIdentifier"
    },
    "OS": {
      "type": "bind",
      "binding": "OS"
    },
    "osLower": {
      "type": "generated",
      "generator": "casing",
      "parameters": {
        "source": "OS",
        "toLower": true
      }
    },
    "canWindowsRestore": {
      "type": "computed",
      "value": "(osLower == 'windows' || osLower == 'windows_nt')",
      "datatype": "bool"
    }
  },
  "primaryOutputs": [
    {
      "condition": "!isVsix && canWindowsRestore",
      "path": "MyExtensionsApp._1.sln"
    },
    {
      "path": "MyExtensionsApp._1\\MyExtensionsApp._1.csproj"
    },
    {
      "path": "MyExtensionsApp._1.Base\\MyExtensionsApp._1.Base.csproj"
    },
    {
      "condition": "useServer",
      "path": "MyExtensionsApp._1.Server\\MyExtensionsApp._1.Server.csproj"
    },
    {
      "condition": "useDataContracts",
      "path": "MyExtensionsApp._1.DataContracts\\MyExtensionsApp._1.DataContracts.csproj"
    },
    {
      "condition": "mauiEmbedding",
      "path": "MyExtensionsApp._1.MauiControls\\MyExtensionsApp._1.MauiControls.csproj"
    },
    {
      "condition": "useUnitTests",
      "path": "MyExtensionsApp._1.Tests\\MyExtensionsApp._1.Tests.csproj"
    },
    {
      "condition": "useUITests",
      "path": "MyExtensionsApp._1.UITests\\MyExtensionsApp._1.UITests.csproj"
    },
    {
      "condition": "cpm",
      "path": "Directory.Packages.props"
    },
    {
      "condition": "useMobile",
      "path": "MyExtensionsApp._1.Mobile\\MyExtensionsApp._1.Mobile.csproj"
    },
    {
      "condition": "useWinAppSdk && canWindowsRestore",
      "path": "MyExtensionsApp._1.Windows\\MyExtensionsApp._1.Windows.csproj"
    },
    {
      "condition": "useWasm",
      "path": "MyExtensionsApp._1.Wasm\\MyExtensionsApp._1.Wasm.csproj"
    },
    {
      "condition": "useGtk",
      "path": "MyExtensionsApp._1.Skia.Gtk\\MyExtensionsApp._1.Skia.Gtk.csproj"
    },
    {
      "condition": "useWpf",
      "path": "MyExtensionsApp._1.Skia.WPF\\MyExtensionsApp._1.Skia.Wpf.csproj"
    },
    {
      "condition": "useLinuxFb",
      "path": "MyExtensionsApp._1.Skia.Linux.FrameBuffer\\MyExtensionsApp._1.Skia.Linux.FrameBuffer.csproj"
    }
  ],
  "sources": [
    {
      "modifiers": [
        {
          "copyOnly": [
            "**/*.png",
            "**/*.jpg",
            "**/*.gif",
            "**/*.woff",
            "**/*.ttf"
          ]
        },
        {
          "condition": "(isVsix)",
          "exclude": [
            "MyExtensionsApp._1.sln",
            "MyExtensionsApp._1-vsmac.slnf"
          ]
        },
        {
          "condition": "(platforms != android)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/Android/**/*"
          ]
        },
        {
          "condition": "(platforms != ios)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/iOS/**/*"
          ]
        },
        {
          "condition": "(platforms != macos)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/macOS/**/*"
          ]
        },
        {
          "condition": "(platforms != maccatalyst)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/MacCatalyst/**/*"
          ]
        },
        {
          "condition": "(!useMobile)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/**/*"
          ]
        },
        {
          "condition": "(!useWasm)",
          "exclude": [
            "MyExtensionsApp._1.Wasm**/*"
          ]
        },
        {
          "condition": "(!useGtk)",
          "exclude": [
            "MyExtensionsApp._1.Skia.Gtk/**/*"
          ]
        },
        {
          "condition": "(!useWpf)",
          "exclude": [
            "MyExtensionsApp._1.Skia.WPF/**/*"
          ]
        },
        {
          "condition": "(!useLinuxFb)",
          "exclude": [
            "MyExtensionsApp._1.Skia.Linux.FrameBuffer/**/*"
          ]
        },
        {
          "condition": "(!useWinAppSdk)",
          "exclude": [
            "MyExtensionsApp._1.Windows/**/*"
          ]
        },
        {
          "condition": "(!useServer)",
          "exclude": [
            "MyExtensionsApp._1.Server/**/*"
          ]
        },
        {
          "condition": "(useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp._1/App.blank.cs"
          ],
          "rename": {
            "MyExtensionsApp._1/App.recommended.cs": "MyExtensionsApp._1/App.cs"
          }
        },
        {
          "condition": "(!useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp._1/App.recommended.cs",
            "MyExtensionsApp._1/Business/**",
            "MyExtensionsApp._1/Presentation/**"
          ],
          "rename": {
            "MyExtensionsApp._1/App.blank.cs": "MyExtensionsApp._1/App.cs"
          }
        },
        {
          "condition": "(useFrameNav)",
          "exclude": [
            "MyExtensionsApp._1/Presentation/**"
          ]
        },
        {
          "condition": "(useDataContracts)",
          "exclude": [
            "MyExtensionsApp._1.Server/WeatherForecast.cs"
          ]
        },
        {
          "condition": "(!useDataContracts)",
          "exclude": [
            "MyExtensionsApp._1.DataContracts/**/*"
          ]
        },
        {
          "condition": "(useMvvm)",
          "exclude": [
            "MyExtensionsApp._1/Presentation/LoginModel.cs",
            "MyExtensionsApp._1/Presentation/MainModel.cs",
            "MyExtensionsApp._1/Presentation/SecondModel.cs",
            "MyExtensionsApp._1/Presentation/ShellModel.cs"
          ]
        },
        {
          "condition": "(useMvux)",
          "exclude": [
            "MyExtensionsApp._1/Presentation/LoginViewModel.cs",
            "MyExtensionsApp._1/Presentation/MainViewModel.cs",
            "MyExtensionsApp._1/Presentation/SecondViewModel.cs",
            "MyExtensionsApp._1/Presentation/ShellViewModel.cs"
          ]
        },
        {
          "condition": "(!useAuthentication)",
          "exclude": [
            "MyExtensionsApp._1/Presentation/Login*.*"
          ]
        },
        {
          "condition": "(!useWebAuthentication && !useOidcAuthentication)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/Android/WebAuthenticationBrokerActivity.Android.cs"
          ]
        },
        {
          "condition": "(!useMsalAuthentication)",
          "exclude": [
            "MyExtensionsApp._1.Mobile/Android/MsalActivity.Android.cs"
          ]
        },
        {
          "condition": "(!useLocalization)",
          "exclude": [
            "MyExtensionsApp._1/Strings/ar/*",
            "MyExtensionsApp._1/Strings/cs/*",
            "MyExtensionsApp._1/Strings/da/*",
            "MyExtensionsApp._1/Strings/de/*",
            "MyExtensionsApp._1/Strings/es/*",
            "MyExtensionsApp._1/Strings/fr/*",
            "MyExtensionsApp._1/Strings/it/*",
            "MyExtensionsApp._1/Strings/ja/*",
            "MyExtensionsApp._1/Strings/ko/*",
            "MyExtensionsApp._1/Strings/nl/*",
            "MyExtensionsApp._1/Strings/pt-BR/*",
            "MyExtensionsApp._1/Strings/ru/*",
            "MyExtensionsApp._1/Strings/sv/*",
            "MyExtensionsApp._1/Strings/tr/*",
            "MyExtensionsApp._1/Strings/uk/*",
            "MyExtensionsApp._1/Strings/vi/*",
            "MyExtensionsApp._1/Strings/zh-Hans/*",
            "MyExtensionsApp._1/Strings/zh-Hant/*"
          ]
        },
        {
          "condition": "(!useArabic)",
          "exclude": [
            "MyExtensionsApp._1/Strings/ar/*"
          ]
        },
        {
          "condition": "(!useCzech)",
          "exclude": [
            "MyExtensionsApp._1/Strings/cs/*"
          ]
        },
        {
          "condition": "(!useDanish)",
          "exclude": [
            "MyExtensionsApp._1/Strings/da/*"
          ]
        },
        {
          "condition": "(!useGerman)",
          "exclude": [
            "MyExtensionsApp._1/Strings/de/*"
          ]
        },
        {
          "condition": "(!useSpanish)",
          "exclude": [
            "MyExtensionsApp._1/Strings/es/*"
          ]
        },
        {
          "condition": "(!useFrench)",
          "exclude": [
            "MyExtensionsApp._1/Strings/fr/*"
          ]
        },
        {
          "condition": "(!useItalian)",
          "exclude": [
            "MyExtensionsApp._1/Strings/it/*"
          ]
        },
        {
          "condition": "(!useJapanese)",
          "exclude": [
            "MyExtensionsApp._1/Strings/ja/*"
          ]
        },
        {
          "condition": "(!useKorean)",
          "exclude": [
            "MyExtensionsApp._1/Strings/ko/*"
          ]
        },
        {
          "condition": "(!useDutch)",
          "exclude": [
            "MyExtensionsApp._1/Strings/nl/*"
          ]
        },
        {
          "condition": "(!usePortuguese)",
          "exclude": [
            "MyExtensionsApp._1/Strings/pt-BR/*"
          ]
        },
        {
          "condition": "(!useRussian)",
          "exclude": [
            "MyExtensionsApp._1/Strings/ru/*"
          ]
        },
        {
          "condition": "(!useSwedish)",
          "exclude": [
            "MyExtensionsApp._1/Strings/sv/*"
          ]
        },
        {
          "condition": "(!useTurkish)",
          "exclude": [
            "MyExtensionsApp._1/Strings/tr/*"
          ]
        },
        {
          "condition": "(!useUkrainian)",
          "exclude": [
            "MyExtensionsApp._1/Strings/uk/*"
          ]
        },
        {
          "condition": "(!useVietnamese)",
          "exclude": [
            "MyExtensionsApp._1/Strings/vi/*"
          ]
        },
        {
          "condition": "(!useChineseSimplified)",
          "exclude": [
            "MyExtensionsApp._1/Strings/zh-Hans/*"
          ]
        },
        {
          "condition": "(!useChineseTraditional)",
          "exclude": [
            "MyExtensionsApp._1/Strings/zh-Hant/*"
          ]
        },
        {
          "condition": "(!useHttp)",
          "exclude": [
            "MyExtensionsApp._1/Infrastructure/DebugHandler.cs",
            "MyExtensionsApp._1/Services/**"
          ]
        },
        {
          "condition": "(!useUnitTests)",
          "exclude": [
            "MyExtensionsApp._1.Tests/**/*"
          ]
        },
        {
          "condition": "(!useUITests)",
          "exclude": [
            "MyExtensionsApp._1.UITests/**/*"
          ]
        },
        {
          "condition": "(useAzurePipelines)",
          "rename": {
            "AzurePipelines": "build",
            "AzurePipelines/Install-WindowsSdkISO.cips": "build/Install-WindowsSdkISO.ps1"
          }
        },
        {
          "condition": "(!useAzurePipelines)",
          "exclude": [
            "azure-pipelines.yml",
            "AzurePipelines/**"
          ]
        },
        {
          "condition": "(useGitHubActions)",
          "rename": {
            "GitHub": ".github",
            "GitHub/Install-WindowsSdkISO.cips": ".github/Install-WindowsSdkISO.ps1"
          }
        },
        {
          "condition": "(!useGitHubActions)",
          "exclude": [
            "GitHub/**"
          ]
        },
        {
          "condition": "(!cpm)",
          "exclude": [
            "Directory.Packages.props"
          ]
        },
        {
          "condition": "(!vscode)",
          "exclude": [
            ".vscode/**/*"
          ]
        },
        {
          "condition": "(!wasmPwaManifest)",
          "exclude": [
            "MyExtensionsApp._1.Wasm/manifest.json",
            "MyExtensionsApp._1.Wasm/Assets/AppIcon-*"
          ]
        },
        {
          "condition": "(!useCsharpMarkup)",
          "exclude": [
            "MyExtensionsApp._1/AppResources.cs",
            "MyExtensionsApp._1/Styles/*.cs"
          ]
        },
        {
          "condition": "(useCsharpMarkup)",
          "exclude": [
            "MyExtensionsApp._1/**/*.xaml",
            "MyExtensionsApp._1/Styles/.gitignore"
          ],
          "rename": {
            "MyExtensionsApp._1/MainPage.xaml.cs": "MyExtensionsApp._1/MainPage.cs",
            "MyExtensionsApp._1/Presentation/MainPage.xaml.cs": "MyExtensionsApp._1/Presentation/MainPage.cs",
            "MyExtensionsApp._1/Presentation/SecondPage.xaml.cs": "MyExtensionsApp._1/Presentation/SecondPage.cs",
            "MyExtensionsApp._1/Presentation/Shell.xaml.cs": "MyExtensionsApp._1/Presentation/Shell.cs"
          }
        },
        {
          "condition": "(!useRegionsNav)",
          "exclude": [
            "MyExtensionsApp._1/Business/Models/Entity.cs"
          ]
        },
        {
          "condition": "(!useMaterial)",
          "exclude": [
            "MyExtensionsApp._1/Styles/**"
          ]
        },
        {
          "condition": "(useExtensionsNavigation && useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp._1/MainPage.xaml",
            "MyExtensionsApp._1/MainPage.xaml.cs"
          ]
        },
        {
          "condition": "(useConfiguration)",
          "exclude": [
            "MyExtensionsApp._1.Tests/UnitTest1.cs"
          ]
        },
        {
          "condition": "(!useConfiguration)",
          "exclude": [
            "MyExtensionsApp._1/Business/Models/AppConfig.cs",
            "MyExtensionsApp._1/appsettings.*",
            "MyExtensionsApp._1.Tests/AppInfoTests.cs"
          ]
        },
        {
          "condition": "(!mauiEmbedding)",
          "exclude": [
            "MyExtensionsApp._1/Assets/Fonts/**",
            "MyExtensionsApp._1/Assets/Images/**",
            "MyExtensionsApp._1.MauiControls/**"
          ]
        },
        {
          "condition": "(!useDspGenerator)",
          "exclude": [
            "MyExtensionsApp._1/Styles/ColorPaletteOverride.zip"
          ]
        }
      ]
    }
  ],
  "postActions": [
    {
      "id": "nugetRestore",
      "condition": "(!skipRestore)",
      "description": "Restore NuGet packages required by this project",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    }
  ],
  "SpecialCustomOperations": {
    "**.appxmanifest": {
      "operations": [
        {
          "type": "conditional",
          "configuration": {
            "if": [ "#if", "<!--#if" ],
            "endif": [ "#endif", "<!--#endif" ],
            "actionableIf": [ "<!--#if" ],
            "actionableElse": [ "#else", "<!--#else" ],
            "actionableElseif": [ "#elseif", "<!--#elseif", "#elif", "<!--#elif" ],
            "trim": true,
            "wholeLine": true,
            "evaluator": "C++"
          }
        }
      ]
    }
  }
}
